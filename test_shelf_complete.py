#!/usr/bin/env python3
"""
ÏßÑÏó¥ÎåÄ Î∂ÑÏÑù ÏôÑÏ†ÑÌïú ÌÖåÏä§Ìä∏ ÏΩîÎìú
ÏÇ¨Ïö©Ïûê ÏßÄÏ†ï ÌååÎùºÎØ∏ÌÑ∞Î°ú Ï†ÑÏ≤¥ Î∂ÑÏÑù Ïã§Ìñâ

ÌååÎùºÎØ∏ÌÑ∞:
- Î∂ÑÏÑù Í∏∞Í∞Ñ: 2025ÎÖÑ 6Ïõî 12Ïùº ~ 2025ÎÖÑ 7Ïõî 12Ïùº
- Ï†úÏô∏ ÎÇ†Ïßú: 2025ÎÖÑ 6Ïõî 22Ïùº
- Ï≤´ ÌîΩÏóÖ ÏßÑÏó¥ÎåÄ: Îπµ
- Ïó∞Î†πÎåÄ: 10ÎåÄ
- ÏÑ±Î≥Ñ: Ïó¨ÏÑ±
- Ï†úÏô∏ ÏßÑÏó¥ÎåÄ: ÏßÑÏó¥ÎåÄÏóÜÏùå, Ï†ÑÏûêÎ†åÏßÄ
"""

import os
import sys
from typing import Dict, Any, List, Union, Optional
from dotenv import load_dotenv

# ÌôòÍ≤ΩÎ≥ÄÏàò Î°úÎìú
load_dotenv()

def _create_clickhouse_client(database="plusinsight"):
    """ClickHouse ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ ÏÉùÏÑ±"""
    import clickhouse_connect
    
    # ÌôòÍ≤ΩÎ≥ÄÏàò Î°úÎìú
    CLICKHOUSE_HOST = os.getenv("CLICKHOUSE_HOST")
    CLICKHOUSE_PORT = os.getenv("CLICKHOUSE_PORT")
    CLICKHOUSE_USER = os.getenv("CLICKHOUSE_USER")
    CLICKHOUSE_PASSWORD = os.getenv("CLICKHOUSE_PASSWORD")
    SSH_HOST = os.getenv("SSH_HOST")
    SSH_PORT = int(os.getenv("SSH_PORT", "22"))
    SSH_USERNAME = os.getenv("SSH_USERNAME")
    SSH_PASSWORD = os.getenv("SSH_PASSWORD")
    
    # SSH ÌÑ∞ÎÑêÎßÅÏù¥ ÌïÑÏöîÌïú Í≤ΩÏö∞
    try:
        from sshtunnel import SSHTunnelForwarder
        SSH_AVAILABLE = True
    except ImportError:
        SSH_AVAILABLE = False
        
    if SSH_AVAILABLE and SSH_HOST:
        try:
            ssh_tunnel = SSHTunnelForwarder(
                (SSH_HOST, SSH_PORT),
                ssh_username=SSH_USERNAME,
                ssh_password=SSH_PASSWORD,
                remote_bind_address=(CLICKHOUSE_HOST, int(CLICKHOUSE_PORT)),
                local_bind_address=("localhost", 0),
                allow_agent=False,
                host_pkey_directories=[]
            )
            ssh_tunnel.start()
            local_port = ssh_tunnel.local_bind_port
            print(f"SSH ÌÑ∞ÎÑê ÏÉùÏÑ±: localhost:{local_port}")
            
            client = clickhouse_connect.get_client(
                host="localhost",
                port=local_port,
                username=CLICKHOUSE_USER,
                password=CLICKHOUSE_PASSWORD,
                database=database
            )
            print(f"ClickHouse Ïó∞Í≤∞ ÏÑ±Í≥µ: localhost:{local_port}, db={database}")
            return client
            
        except Exception as e:
            print(f"SSH ÌÑ∞ÎÑê Ïó∞Í≤∞ Ïã§Ìå®: {e}")
            return None
    else:
        # ÏßÅÏ†ë Ïó∞Í≤∞
        try:
            client = clickhouse_connect.get_client(
                host=CLICKHOUSE_HOST,
                port=int(CLICKHOUSE_PORT),
                username=CLICKHOUSE_USER,
                password=CLICKHOUSE_PASSWORD,
                database=database
            )
            print(f"ClickHouse ÏßÅÏ†ë Ïó∞Í≤∞ ÏÑ±Í≥µ: {CLICKHOUSE_HOST}:{CLICKHOUSE_PORT}, db={database}")
            return client
        except Exception as e:
            print(f"ClickHouse ÏßÅÏ†ë Ïó∞Í≤∞ Ïã§Ìå®: {e}")
            return None


def complete_shelf_analysis(
    start_date: str = "2025-06-12",
    end_date: str = "2025-07-12",
    exclude_dates: List[str] = None,
    target_shelves: List[str] = None,
    exclude_shelves: List[str] = None,
    age_groups: List[str] = None,
    gender_labels: List[str] = None,
    top_n: int = 5,
    exclude_from_top: List[str] = None,
    period: str = "both"
):
    """
    ÏôÑÏ†ÑÌïú ÏßÑÏó¥ÎåÄ Î∂ÑÏÑù Ìï®Ïàò
    """
    print(f"üîç [DEBUG] complete_shelf_analysis Ìò∏Ï∂úÎê®")
    print(f"  start_date: {start_date}")
    print(f"  end_date: {end_date}")
    print(f"  target_shelves: {target_shelves}")
    print(f"  age_groups: {age_groups}")
    print(f"  gender_labels: {gender_labels}")
    print(f"  exclude_dates: {exclude_dates}")
    print(f"  top_n: {top_n}")
    
    client = _create_clickhouse_client()
    if not client:
        return {"error": "ClickHouse Ïó∞Í≤∞ Ïã§Ìå®"}
    
    # ÏïàÏ†ÑÏû•Ïπò: ÎÑàÎ¨¥ ÎÑìÏùÄ Î≤îÏúÑ ÏøºÎ¶¨ Î∞©ÏßÄ
    if not target_shelves and not age_groups and not gender_labels:
        return {
            "error": "Î∂ÑÏÑù Î≤îÏúÑÍ∞Ä ÎÑàÎ¨¥ ÎÑìÏäµÎãàÎã§. target_shelves, age_groups, gender_labels Ï§ë ÏµúÏÜå ÌïòÎÇòÎäî ÏßÄÏ†ïÌï¥Ïïº Ìï©ÎãàÎã§.",
            "suggestion": "Ïòà: target_shelves=['Îπµ'], age_groups=['20ÎåÄ'], gender_labels=['Ïó¨Ïûê']"
        }
    
    # ÌååÎùºÎØ∏ÌÑ∞ Ï≤òÎ¶¨
    exclude_dates = exclude_dates or ['2025-06-22']
    exclude_shelves = exclude_shelves or ['Í≥ÑÏÇ∞ÎåÄ']
    exclude_from_top = exclude_from_top or []
    
    # ÎÇ†Ïßú Ï°∞Í±¥
    exclude_dates_str = "', '".join(exclude_dates)
    date_condition = f"AND cbe.date NOT IN ('{exclude_dates_str}')"
    
    # Ïó∞Î†πÎåÄ Ï°∞Í±¥
    age_condition = ""
    if age_groups:
        age_conditions = []
        for age_group in age_groups:
            if age_group == '10ÎåÄ':
                age_conditions.append("(cbe.age >= 10 AND cbe.age < 20)")
            elif age_group == '20ÎåÄ':
                age_conditions.append("(cbe.age >= 20 AND cbe.age < 30)")
            elif age_group == '30ÎåÄ':
                age_conditions.append("(cbe.age >= 30 AND cbe.age < 40)")
            elif age_group == '40ÎåÄ':
                age_conditions.append("(cbe.age >= 40 AND cbe.age < 50)")
            elif age_group == '50ÎåÄ':
                age_conditions.append("(cbe.age >= 50 AND cbe.age < 60)")
            elif age_group == '60ÎåÄ Ïù¥ÏÉÅ':
                age_conditions.append("(cbe.age >= 60)")
            elif age_group == 'ÎØ∏ÏÉÅ':
                age_conditions.append("(cbe.age IS NULL)")
        if age_conditions:
            age_condition = f"AND ({' OR '.join(age_conditions)})"
    
    # ÏÑ±Î≥Ñ Ï°∞Í±¥
    gender_condition = ""
    if gender_labels:
        gender_conditions = []
        for gender_label in gender_labels:
            if gender_label == 'ÎÇ®Ïûê':
                gender_conditions.append("cbe.gender = 0")
            elif gender_label == 'Ïó¨Ïûê':
                gender_conditions.append("cbe.gender = 1")
            elif gender_label == 'ÎØ∏ÏÉÅ':
                gender_conditions.append("cbe.gender IS NULL")
        if gender_conditions:
            gender_condition = f"AND ({' OR '.join(gender_conditions)})"
    
    # ÏßÑÏó¥ÎåÄ ÌïÑÌÑ∞ Ï°∞Í±¥
    target_shelf_condition = ""
    if target_shelves:
        target_shelves_str = "', '".join(target_shelves)
        target_shelf_condition = f"AND z.name IN ('{target_shelves_str}')"
    
    exclude_shelf_condition = ""
    if exclude_shelves:
        exclude_shelves_str = "', '".join(exclude_shelves)
        exclude_shelf_condition = f"AND COALESCE(NULLIF(shelf_name, ''), 'ÏßÑÏó¥ÎåÄÏóÜÏùå') NOT IN ('{exclude_shelves_str}')"
    
    exclude_from_top_condition = ""
    if exclude_from_top:
        exclude_from_top_str = "', '".join(exclude_from_top)
        exclude_from_top_condition = f"AND shelf_name NOT IN ('{exclude_from_top_str}')"
    
    print("üîç [DEBUG] ÏøºÎ¶¨ Ï°∞Í±¥Îì§:")
    print(f"  date_condition: {date_condition}")
    print(f"  age_condition: {age_condition}")
    print(f"  gender_condition: {gender_condition}")
    print(f"  target_shelf_condition: {target_shelf_condition}")
    print(f"  exclude_shelf_condition: {exclude_shelf_condition}")
    
    # ÏôÑÏ†ÑÌïú Î∂ÑÏÑù ÏøºÎ¶¨
    analysis_query = f"""
    WITH pickup_visit_counts AS (
        SELECT
            cbe.person_seq AS person_seq,
            cba.attention_target_zone_id AS attention_target_zone_id,
            z.name AS zone_name,
            z.coords AS coords,
            MIN(cbe.`timestamp`) AS first_event_date,
            cbe.age AS age,
            cbe.gender AS gender,
            COUNT(*) AS visit_count
        FROM customer_behavior_event cbe
        LEFT JOIN customer_behavior_area cba ON cbe.customer_behavior_area_id = cba.id
        LEFT JOIN zone z ON cba.attention_target_zone_id = z.id
        WHERE cbe.date BETWEEN '{start_date}' AND '{end_date}'
            {date_condition}
            AND cbe.event_type = 1  -- ÌîΩÏóÖ
            AND (cbe.is_staff IS NULL OR cbe.is_staff != 1)
            AND z.name IS NOT NULL
            {age_condition}
            {gender_condition}
            {target_shelf_condition}
        GROUP BY
            cbe.person_seq,
            cbe.age,
            cbe.gender,
            cba.attention_target_zone_id,
            z.name,
            z.coords
    ),
    gaze_visit_counts AS (
        SELECT
            cbe.person_seq AS person_seq,
            cba.attention_target_zone_id AS attention_target_zone_id,
            z.name AS zone_name,
            z.coords AS coords,
            MIN(cbe.`timestamp`) AS first_event_date,
            cbe.age AS age,
            cbe.gender AS gender,
            COUNT(*) AS visit_count
        FROM customer_behavior_event cbe
        LEFT JOIN customer_behavior_area cba ON cbe.customer_behavior_area_id = cba.id
        LEFT JOIN zone z ON cba.attention_target_zone_id = z.id
        WHERE cbe.date BETWEEN '{start_date}' AND '{end_date}'
            {date_condition}
            AND cbe.event_type = 0  -- ÏùëÏãú
            AND (cbe.is_staff IS NULL OR cbe.is_staff != 1)
            AND z.name IS NOT NULL
            {age_condition}
            {gender_condition}
        GROUP BY
            cbe.person_seq,
            cbe.age,
            cbe.gender,
            cba.attention_target_zone_id,
            z.name,
            z.coords
    ),
    pickup_df AS (
        SELECT
            person_seq,
            attention_target_zone_id,
            zone_name,
            coords,
            first_event_date,
            age,
            gender,
            visit_count,
            ROW_NUMBER() OVER (
                PARTITION BY person_seq
                ORDER BY first_event_date
            ) AS pickup_order
        FROM pickup_visit_counts
    ),
    gaze_df AS (
        SELECT
            person_seq,
            attention_target_zone_id,
            zone_name,
            coords,
            first_event_date,
            age,
            gender,
            visit_count,
            ROW_NUMBER() OVER (
                PARTITION BY person_seq
                ORDER BY first_event_date
            ) AS gaze_order
        FROM gaze_visit_counts
        WHERE visit_count >= 3
    ),
    combined_events AS (
        -- ÌîΩÏóÖ Ïù¥Î≤§Ìä∏
        SELECT 
            person_seq,
            first_event_date,
            zone_name,
            coords,
            age,
            gender,
            'P' as event_type_label
        FROM pickup_df
        UNION ALL
        -- ÏùëÏãú Ïù¥Î≤§Ìä∏ (3Ìöå Ïù¥ÏÉÅ Î∞©Î¨∏Ìïú Ï°¥Îßå)
        SELECT 
            person_seq,
            first_event_date,
            zone_name,
            coords,
            age,
            gender,
            'G' as event_type_label
        FROM gaze_df
    ),
    integrated_routes AS (
        SELECT
            person_seq,
            -- ÌîΩÏóÖ ÏßÅÏ†Ñ 1Î≤àÏß∏ ÏùëÏãú Îß§ÎåÄ
            arrayElement(
                arrayReverse(
                    arrayMap(x -> x.2,
                        arraySlice(
                            arrayFilter(y -> y.4 = 'G', arraySort(groupArray((first_event_date, zone_name, coords, event_type_label)))),
                            1,
                            arrayFirstIndex(x -> x = 'P', 
                                arrayMap(x -> x.4, arraySort(groupArray((first_event_date, zone_name, coords, event_type_label))))
                            ) - 1
                        )
                    )
                ), 1
            ) AS before_pickup_gaze_1st,
            -- ÌîΩÏóÖ ÏßÅÏ†Ñ 2Î≤àÏß∏ ÏùëÏãú Îß§ÎåÄ
            arrayElement(
                arrayReverse(
                    arrayMap(x -> x.2,
                        arraySlice(
                            arrayFilter(y -> y.4 = 'G', arraySort(groupArray((first_event_date, zone_name, coords, event_type_label)))),
                            1,
                            arrayFirstIndex(x -> x = 'P', 
                                arrayMap(x -> x.4, arraySort(groupArray((first_event_date, zone_name, coords, event_type_label))))
                            ) - 1
                        )
                    )
                ), 2
            ) AS before_pickup_gaze_2nd,
            -- ÌîΩÏóÖ ÏßÅÏ†Ñ 3Î≤àÏß∏ ÏùëÏãú Îß§ÎåÄ
            arrayElement(
                arrayReverse(
                    arrayMap(x -> x.2,
                        arraySlice(
                            arrayFilter(y -> y.4 = 'G', arraySort(groupArray((first_event_date, zone_name, coords, event_type_label)))),
                            1,
                            arrayFirstIndex(x -> x = 'P', 
                                arrayMap(x -> x.4, arraySort(groupArray((first_event_date, zone_name, coords, event_type_label))))
                            ) - 1
                        )
                    )
                ), 3
            ) AS before_pickup_gaze_3rd,
            -- ÌîΩÏóÖ ÌõÑ 1Î≤àÏß∏ ÏùëÏãú Îß§ÎåÄ
            arrayElement(
                arrayMap(x -> x.2,
                    arraySlice(
                        arrayFilter(y -> y.4 = 'G', arraySort(groupArray((first_event_date, zone_name, coords, event_type_label)))),
                        arrayCount(x -> x = 'G', 
                            arraySlice(
                                arrayMap(z -> z.4, arraySort(groupArray((first_event_date, zone_name, coords, event_type_label)))),
                                1,
                                arrayFirstIndex(x -> x = 'P', 
                                    arrayMap(z -> z.4, arraySort(groupArray((first_event_date, zone_name, coords, event_type_label))))
                                ) - 1
                            )
                        ) + 1,
                        length(arrayFilter(y -> y.4 = 'G', arraySort(groupArray((first_event_date, zone_name, coords, event_type_label)))))
                    )
                ), 1
            ) AS after_pickup_gaze_1st,
            -- ÌîΩÏóÖ ÌõÑ 2Î≤àÏß∏ ÏùëÏãú Îß§ÎåÄ
            arrayElement(
                arrayMap(x -> x.2,
                    arraySlice(
                        arrayFilter(y -> y.4 = 'G', arraySort(groupArray((first_event_date, zone_name, coords, event_type_label)))),
                        arrayCount(x -> x = 'G', 
                            arraySlice(
                                arrayMap(z -> z.4, arraySort(groupArray((first_event_date, zone_name, coords, event_type_label)))),
                                1,
                                arrayFirstIndex(x -> x = 'P', 
                                    arrayMap(z -> z.4, arraySort(groupArray((first_event_date, zone_name, coords, event_type_label))))
                                ) - 1
                            )
                        ) + 1,
                        length(arrayFilter(y -> y.4 = 'G', arraySort(groupArray((first_event_date, zone_name, coords, event_type_label)))))
                    )
                ), 2
            ) AS after_pickup_gaze_2nd,
            -- ÌîΩÏóÖ ÌõÑ 3Î≤àÏß∏ ÏùëÏãú Îß§ÎåÄ
            arrayElement(
                arrayMap(x -> x.2,
                    arraySlice(
                        arrayFilter(y -> y.4 = 'G', arraySort(groupArray((first_event_date, zone_name, coords, event_type_label)))),
                        arrayCount(x -> x = 'G', 
                            arraySlice(
                                arrayMap(z -> z.4, arraySort(groupArray((first_event_date, zone_name, coords, event_type_label)))),
                                1,
                                arrayFirstIndex(x -> x = 'P', 
                                    arrayMap(z -> z.4, arraySort(groupArray((first_event_date, zone_name, coords, event_type_label))))
                                ) - 1
                            )
                        ) + 1,
                        length(arrayFilter(y -> y.4 = 'G', arraySort(groupArray((first_event_date, zone_name, coords, event_type_label)))))
                    )
                ), 3
            ) AS after_pickup_gaze_3rd
        FROM combined_events
        GROUP BY person_seq
        HAVING arrayFirstIndex(x -> x = 'P', 
            arrayMap(x -> x.4, arraySort(groupArray((first_event_date, zone_name, coords, event_type_label))))
        ) > 0  -- ÌîΩÏóÖ Ïù¥Î≤§Ìä∏Í∞Ä ÏûàÎäî Í≥†Í∞ùÎßå
    ),
    
    -- ÌîΩÏóÖ Ï†Ñ/ÌõÑ ÏßÑÏó¥ÎåÄ Î∂ÑÏÑù Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ±
    shelf_analysis AS (
        SELECT 'before' as period, COALESCE(NULLIF(before_pickup_gaze_1st, ''), 'ÏßÑÏó¥ÎåÄÏóÜÏùå') as shelf_name FROM integrated_routes WHERE before_pickup_gaze_1st IS NOT NULL AND before_pickup_gaze_1st != ''
        UNION ALL
        SELECT 'before' as period, COALESCE(NULLIF(before_pickup_gaze_2nd, ''), 'ÏßÑÏó¥ÎåÄÏóÜÏùå') as shelf_name FROM integrated_routes WHERE before_pickup_gaze_2nd IS NOT NULL AND before_pickup_gaze_2nd != ''
        UNION ALL
        SELECT 'before' as period, COALESCE(NULLIF(before_pickup_gaze_3rd, ''), 'ÏßÑÏó¥ÎåÄÏóÜÏùå') as shelf_name FROM integrated_routes WHERE before_pickup_gaze_3rd IS NOT NULL AND before_pickup_gaze_3rd != ''
        UNION ALL
        SELECT 'after' as period, COALESCE(NULLIF(after_pickup_gaze_1st, ''), 'ÏßÑÏó¥ÎåÄÏóÜÏùå') as shelf_name FROM integrated_routes WHERE after_pickup_gaze_1st IS NOT NULL AND after_pickup_gaze_1st != ''
        UNION ALL
        SELECT 'after' as period, COALESCE(NULLIF(after_pickup_gaze_2nd, ''), 'ÏßÑÏó¥ÎåÄÏóÜÏùå') as shelf_name FROM integrated_routes WHERE after_pickup_gaze_2nd IS NOT NULL AND after_pickup_gaze_2nd != ''
        UNION ALL
        SELECT 'after' as period, COALESCE(NULLIF(after_pickup_gaze_3rd, ''), 'ÏßÑÏó¥ÎåÄÏóÜÏùå') as shelf_name FROM integrated_routes WHERE after_pickup_gaze_3rd IS NOT NULL AND after_pickup_gaze_3rd != ''
    ),
    
    -- ÏßÑÏó¥ÎåÄÎ≥Ñ Î∞©Î¨∏ ÏßëÍ≥Ñ Î∞è ÎπÑÏú® Í≥ÑÏÇ∞
    aggregated AS (
        SELECT 
            period,
            shelf_name,
            COUNT(*) as visit_count,
            ROUND(COUNT(*) * 100.0 / SUM(COUNT(*)) OVER (PARTITION BY period), 2) as percentage
        FROM shelf_analysis
        WHERE 1=1 {exclude_shelf_condition}
        GROUP BY period, shelf_name
    ),
    
    -- Í∏∞Í∞ÑÎ≥Ñ Top N ÏàúÏúÑ Îß§Í∏∞Í∏∞
    ranked AS (
        SELECT 
            period,
            shelf_name,
            percentage,
            ROW_NUMBER() OVER (PARTITION BY period ORDER BY percentage DESC) as rank
        FROM aggregated
        WHERE percentage > 0
        {exclude_from_top_condition}
    ),
    
    -- Top NÎßå ÌïÑÌÑ∞ÎßÅ
    topN AS (
        SELECT *
        FROM ranked
        WHERE rank <= {top_n}
    ),
    
    -- ÌîΩÏóÖ Ï†Ñ TopN Í≤∞Í≥º
    before_results AS (
        SELECT 
            'BEFORE' as analysis_type,
            rank as no,
            shelf_name,
            percentage
        FROM topN 
        WHERE period = 'before'
    ),
    
    -- ÌîΩÏóÖ ÌõÑ TopN Í≤∞Í≥º
    after_results AS (
        SELECT 
            'AFTER' as analysis_type,
            rank as no,
            shelf_name,
            percentage
        FROM topN 
        WHERE period = 'after'
    )
    
    -- ÏµúÏ¢Ö Í≤∞Í≥º
    SELECT * FROM before_results
    UNION ALL
    SELECT * FROM after_results
    ORDER BY analysis_type, no
    """
    
    try:
        print(f"üîç [DEBUG] ÏôÑÏ†ÑÌïú Î∂ÑÏÑù ÏøºÎ¶¨ Ïã§Ìñâ ÏãúÏûë")
        
        result = client.query(analysis_query)
        analysis_rows = result.result_rows
        print(f"‚úÖ ÏßÑÏó¥ÎåÄ Î∂ÑÏÑù ÏôÑÎ£å: {len(analysis_rows):,}Ìñâ")
        
        # Í≤∞Í≥ºÎ•º ÌäúÌîå ÌòïÌÉúÎ°ú Î≥ÄÌôò
        formatted_results = []
        for row in analysis_rows:
            period, rank, shelf_name, percentage = row
            formatted_results.append((period, rank, shelf_name, percentage))
        
        return formatted_results
        
    except Exception as e:
        print(f"‚ùå ÏøºÎ¶¨ Ïã§Ìñâ Ïã§Ìå®: {e}")
        return {"error": str(e)}


def test_complete_shelf_analysis():
    """ÏôÑÏ†ÑÌïú ÏßÑÏó¥ÎåÄ Î∂ÑÏÑù ÌÖåÏä§Ìä∏"""
    
    print("=" * 60)
    print("üß™ ÏôÑÏ†ÑÌïú ÏßÑÏó¥ÎåÄ Î∂ÑÏÑù ÌÖåÏä§Ìä∏ ÏãúÏûë")
    print("=" * 60)
    
    # ÌÖåÏä§Ìä∏ ÌååÎùºÎØ∏ÌÑ∞ ÏÑ§Ï†ï
    test_params = {
        "start_date": "2025-06-12",
        "end_date": "2025-07-12", 
        "exclude_dates": ["2025-06-22"],
        "target_shelves": ["Îπµ"],
        "age_groups": ["10ÎåÄ"],
        "gender_labels": ["Ïó¨Ïûê"],
        "exclude_shelves": ["ÏßÑÏó¥ÎåÄÏóÜÏùå", "Ï†ÑÏûêÎ†åÏßÄ"],
        "top_n": 5,
        "period": "both"
    }
    
    print("üìã ÌÖåÏä§Ìä∏ ÌååÎùºÎØ∏ÌÑ∞:")
    for key, value in test_params.items():
        print(f"  - {key}: {value}")
    print()
    
    try:
        print("üîÑ complete_shelf_analysis Ìï®Ïàò Ìò∏Ï∂ú Ï§ë...")
        print("-" * 40)
        
        # Ìï®Ïàò Ìò∏Ï∂ú
        result = complete_shelf_analysis(**test_params)
        
        print("‚úÖ Ìï®Ïàò Ìò∏Ï∂ú ÏôÑÎ£å!")
        print("-" * 40)
        
        # Í≤∞Í≥º Ï∂úÎ†•
        print("üìä Î∂ÑÏÑù Í≤∞Í≥º:")
        print("-" * 40)
        
        if isinstance(result, dict) and "error" in result:
            print(f"‚ùå Ïò§Î•ò Î∞úÏÉù: {result['error']}")
        elif isinstance(result, list):
            print(f"üìà Ï¥ù {len(result)}Í∞úÏùò Í≤∞Í≥º:")
            print()
            
            # BEFORE Í≤∞Í≥º Ï∂úÎ†•
            before_results = [r for r in result if r[0] == 'BEFORE']
            if before_results:
                print("üîç ÌîΩÏóÖ Ï†Ñ (BEFORE) Top ÏßÑÏó¥ÎåÄ:")
                for item in before_results:
                    period, rank, shelf_name, percentage = item
                    print(f"  {rank:2d}ÏúÑ: {shelf_name:15s} ({percentage:6.2f}%)")
                print()
            
            # AFTER Í≤∞Í≥º Ï∂úÎ†•
            after_results = [r for r in result if r[0] == 'AFTER']
            if after_results:
                print("üîç ÌîΩÏóÖ ÌõÑ (AFTER) Top ÏßÑÏó¥ÎåÄ:")
                for item in after_results:
                    period, rank, shelf_name, percentage = item
                    print(f"  {rank:2d}ÏúÑ: {shelf_name:15s} ({percentage:6.2f}%)")
                print()
                
            # Ï†ÑÏ≤¥ Í≤∞Í≥º ÏöîÏïΩ
            print("üìã Ï†ÑÏ≤¥ Í≤∞Í≥º ÏöîÏïΩ:")
            for i, item in enumerate(result, 1):
                period, rank, shelf_name, percentage = item
                print(f"  {i:2d}. [{period:6s}] {rank}ÏúÑ: {shelf_name:15s} ({percentage:6.2f}%)")
                
        else:
            print(f"üîç Í≤∞Í≥º ÌÉÄÏûÖ: {type(result)}")
            print(f"üìÑ Í≤∞Í≥º ÎÇ¥Ïö©: {result}")
            
    except Exception as e:
        print(f"‚ùå ÌÖåÏä§Ìä∏ Ïã§Ìñâ Ï§ë Ïò§Î•ò Î∞úÏÉù:")
        print(f"   Ïò§Î•ò ÌÉÄÏûÖ: {type(e).__name__}")
        print(f"   Ïò§Î•ò Î©îÏãúÏßÄ: {str(e)}")
        
        # ÏÉÅÏÑ∏ Ïò§Î•ò Ï†ïÎ≥¥
        import traceback
        print("\nüîç ÏÉÅÏÑ∏ Ïò§Î•ò Ï†ïÎ≥¥:")
        print("-" * 40)
        traceback.print_exc()
    
    print("\n" + "=" * 60)
    print("üß™ ÌÖåÏä§Ìä∏ ÏôÑÎ£å")
    print("=" * 60)


if __name__ == "__main__":
    print("üöÄ ÏôÑÏ†ÑÌïú ÏßÑÏó¥ÎåÄ Î∂ÑÏÑù ÌÖåÏä§Ìä∏ ÌîÑÎ°úÍ∑∏Îû® ÏãúÏûë")
    print()
    
    # ÏôÑÏ†ÑÌïú Î∂ÑÏÑù ÌÖåÏä§Ìä∏
    test_complete_shelf_analysis()